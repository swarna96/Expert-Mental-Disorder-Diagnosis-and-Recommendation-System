# Followed Option-1
# Creating a shell for Backward chaining

# Define the clause variable list
clause_variables = [
    "Anger",
    "Hopelessness",
    "Sadness",
    "GeneralDiscontent",
    "",
    "",
    "",
    "",
    "",
    "",
    "Anger",
    "Hopelessness",
    "Sadness",
    "GeneralDiscontent",
    "",
    "",
    "",
    "",
    "",
    "",
    "Anger",
    "Hopelessness",
    "Sadness",
    "GeneralDiscontent",
    "",
    "",
    "",
    "",
    "",
    "",
    "Anger",
    "Hopelessness",
    "Sadness",
    "GeneralDiscontent",
    "",
    "",
    "",
    "",
    "",
    "",
    "Anger",
    "Hopelessness",
    "Sadness",
    "GeneralDiscontent",
    "",
    "",
    "",
    "",
    "",
    "",
    "Loneliness",
    "Guilt",
    "Mistrust",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Loneliness",
    "Guilt",
    "Mistrust",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Loneliness",
    "Guilt",
    "Mistrust",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "SevereAnxiety",
    "Irritability",
    "Fear",
    "Hypervigilance",
    "",
    "",
    "",
    "",
    "",
    "",
    "SevereAnxiety",
    "Irritability",
    "Fear",
    "Hypervigilance",
    "",
    "",
    "",
    "",
    "",
    "",
    "SevereAnxiety",
    "Irritability",
    "Fear",
    "Hypervigilance",
    "",
    "",
    "",
    "",
    "",
    "",
    "SevereAnxiety",
    "Irritability",
    "Fear",
    "Hypervigilance",
    "",
    "",
    "",
    "",
    "",
    "",
    "SevereAnxiety",
    "Irritability",
    "Fear",
    "Hypervigilance",
    "",
    "",
    "",
    "",
    "",
    "",
    "Sadness",
    "ManicEpisodes",
    "Apathy",
    "Hopelessness",
    "Apprehension",
    "LossOfInterest",
    "",
    "",
    "",
    "",
    "Sadness",
    "ManicEpisodes",
    "Apathy",
    "Hopelessness",
    "Apprehension",
    "LossOfInterest",
    "",
    "",
    "",
    "",
    "Sadness",
    "ManicEpisodes",
    "Apathy",
    "Hopelessness",
    "Apprehension",
    "LossOfInterest",
    "",
    "",
    "",
    "",
    "Sadness",
    "ManicEpisodes",
    "Apathy",
    "Hopelessness",
    "Apprehension",
    "LossOfInterest",
    "",
    "",
    "",
    "",
    "Sadness",
    "ManicEpisodes",
    "Apathy",
    "Hopelessness",
    "Apprehension",
    "LossOfInterest",
    "",
    "",
    "",
    "",
    "Sadness",
    "ManicEpisodes",
    "Apathy",
    "Hopelessness",
    "Apprehension",
    "LossOfInterest",
    "",
    "",
    "",
    "",
    "Sadness",
    "ManicEpisodes",
    "Apathy",
    "Hopelessness",
    "Apprehension",
    "LossOfInterest",
    "",
    "",
    "",
    "",
    "SelfHarm",
    "AlteredConscious",
    "SelfDestructiveBehavior",
    "FeelingSelfDetatchment",
    "",
    "",
    "",
    "",
    "",
    "",
    "SelfHarm",
    "AlteredConscious",
    "SelfDestructiveBehavior",
    "FeelingSelfDetatchment",
    "",
    "",
    "",
    "",
    "",
    "",
    "SelfHarm",
    "AlteredConscious",
    "SelfDestructiveBehavior",
    "FeelingSelfDetatchment",
    "",
    "",
    "",
    "",
    "",
    "",
    "SelfHarm",
    "AlteredConscious",
    "SelfDestructiveBehavior",
    "FeelingSelfDetatchment",
    "",
    "",
    "",
    "",
    "",
    "",
    "SelfHarm",
    "AlteredConscious",
    "SelfDestructiveBehavior",
    "FeelingSelfDetatchment",
    "",
    "",
    "",
    "",
    "",
    "",
    "Grandiosity",
    "Euphoria",
    "SuddenEnergy",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Grandiosity",
    "Euphoria",
    "SuddenEnergy",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Grandiosity",
    "Euphoria",
    "SuddenEnergy",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Grandiosity",
    "Euphoria",
    "SuddenEnergy",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "LossOfInterest",
    "ExcessiveCrying",
    "Irritability",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "LossOfInterest",
    "ExcessiveCrying",
    "Irritability",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "LossOfInterest",
    "ExcessiveCrying",
    "Irritability",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "LossOfInterest",
    "ExcessiveCrying",
    "Irritability",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "RitualisticBehavior",
    "CompulsiveHoarding",
    "PanicAttacks",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "RitualisticBehavior",
    "CompulsiveHoarding",
    "PanicAttacks",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "RitualisticBehavior",
    "CompulsiveHoarding",
    "PanicAttacks",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "RitualisticBehavior",
    "CompulsiveHoarding",
    "PanicAttacks",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "CompulsiveBehavior",
    "InappropriateEmotionalResponses",
    "ElevatedMood",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "CompulsiveBehavior",
    "InappropriateEmotionalResponses",
    "ElevatedMood",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "CompulsiveBehavior",
    "InappropriateEmotionalResponses",
    "ElevatedMood",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "CompulsiveBehavior",
    "InappropriateEmotionalResponses",
    "ElevatedMood",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "VisualHallucinations",
    "PersistentRepetitions",
    "ReligiousDelusions",
    "",
    "",
    "",
    "",
    "",
    "",
    ""
]
# Store instantiated variables
variable_list = {
    "Anxiety": "Has the patient been experiencing anxiety?",
    "Depression": "Has the patient been experiencing depression?",
    "Anger": "Has the patient been experiencing anger?",
    "Hopelessness": "Has the patient been experiencing hopelessness?",
    "Sadness": "Has the patient been experiencing sadness?",
    "GeneralDiscontent": "Has the patient been experiencing general discontent?",
    "SocialIsolation": "Has the patient been experiencing social isolation?",
    "ManicEpisodes": "Has the patient been experiencing manic episodes?",
    "Apathy": "Has the patient been experiencing apathy?",
    "Apprehension": "Has the patient been experiencing apprehension?",
    "LossOfInterest": "Has the patient been experiencing loss of interest?",
    "SelfHarm": "Has the patient been experiencing self harm?",
    "AlteredConscious": "Has the patient been experiencing altered conscious?",
    "SelfDestructiveBehavior": "Has the patient been experiencing self destructive behavior?",
    "FeelingSelfDetatchment": "Has the patient been experiencing feeling self detatchment?",
    "Agitation": "Has the patient been experiencing agitation?",
    "Grandiosity": "Has the patient been experiencing grandiosity?",
    "Euphoria": "Has the patient been experiencing euphoria?",
    "SuddenEnergy": "Has the patient been experiencing sudden energy?",
    "RepetitiveMovements": "Has the patient been experiencing repetitive movements?",
    "ExcessiveCrying": "Has the patient been experiencing excessive crying?",
    "Aggression": "Has the patient been experiencing aggression?",
    "Paranoia": "Has the patient been experiencing paranoia?",
    "Disorganization": "Has the patient been experiencing disorganization?",
    "RitualisticBehavior": "Has the patient been experiencing ritualistic behavior?",
    "CompulsiveHoarding": "Has the patient been experiencing compulsive hoarding?",
    "PanicAttacks": "Has the patient been experiencing panic attacks?",
    "CompulsiveBehavior": "Has the patient been experiencing compulsive behavior?",
    "InappropriateEmotionalResponse": "Has the patient been experiencing inappropriate emotional response?",
    "ElevatedMood": "Has the patient been experiencing elevated mood?",
    "VisualHallucinations": "Has the patient been experiencing visual hallucinations?",
    "PersistentRepetitions": "Has the patient been experiencing persistent repetitions?",
    "ReligiousDelusions": "Has the patient been experiencing religious delusions?",
    "Loneliness": "Has the patient been experiencing loneliness?",
    "Guilt": "Has the patient been experiencing guilt?",
    "Mistrust": "Has the patient been experiencing mistrust?",
    "SevereAnxiety": "Has the patient been experiencing severe anxiety?",
    "Irritability": "Has the patient been experiencing Irritability?",
    "Fear": "Has the patient been experiencing Fear?",
    "Hypervigilance": "Has the patient been experiencing Hypervigilance?",
    "InappropriateEmotionalResponses": "Has the patient been experiencing inappropriate emotional responses?",
    "ElevatedMood": "Has the patient been experiencing elevated mood?"
}


# facts -> dictionary to store the variables and their values
facts = {variable: None for variable in variable_list}


class Rule:
    def __init__(self, conditions, actions):
        self.conditions = conditions
        self.actions = actions


# Define the rules with ruleNum
rules = {
    10: Rule({"Anger": "Yes", "Hopelessness": "Yes", "Sadness": "Yes", "GeneralDiscontent": "Yes"},
             {"Disorder": "DYSTHYMIA"}),
    20: Rule({"Anger": "Yes", "Hopelessness": "Yes", "Sadness": "Yes", "GeneralDiscontent": "No"},
             {"Disorder": "DYSTHYMIA"}),
    30: Rule({"Anger": "Yes", "Hopelessness": "Yes", "Sadness": "No", "GeneralDiscontent": "Yes"},
             {"Disorder": "DYSTHYMIA"}),
    40: Rule({"Anger": "Yes", "Hopelessness": "No", "Sadness": "Yes", "GeneralDiscontent": "Yes"},
             {"Disorder": "DYSTHYMIA"}),
    50: Rule({"Anger": "No", "Hopelessness": "Yes", "Sadness": "Yes", "GeneralDiscontent": "Yes"},
             {"Disorder": "DYSTHYMIA"}),
    60: Rule({"Loneliness": "Yes", "Guilt": "Yes", "Mistrust": "Yes"},
             {"Disorder": "POST TRAUMATIC STRESS DISORDER"}),
    70: Rule({"Loneliness": "Yes", "Guilt": "Yes", "Mistrust": "No"},
             {"Disorder": "POST TRAUMATIC STRESS DISORDER"}),
    80: Rule({"Loneliness": "Yes", "Guilt": "No", "Mistrust": "Yes"},
             {"Disorder": "POST TRAUMATIC STRESS DISORDER"}),
    90: Rule({"SevereAnxiety": "Yes", "Irritability": "Yes", "Fear": "Yes", "Hypervigilance": "Yes"},
             {"Disorder": "GENERALIZED ANXIETY DISORDER"}),
    100: Rule({"SevereAnxiety": "Yes", "Irritability": "Yes", "Fear": "Yes", "Hypervigilance": "No"},
              {"Disorder": "GENERALIZED ANXIETY DISORDER"}),
    110: Rule({"SevereAnxiety": "Yes", "Irritability": "Yes", "Fear": "No", "Hypervigilance": "Yes"},
              {"Disorder": "GENERALIZED ANXIETY DISORDER"}),
    120: Rule({"SevereAnxiety": "Yes", "Irritability": "No", "Fear": "Yes", "Hypervigilance": "Yes"},
              {"Disorder": "GENERALIZED ANXIETY DISORDER"}),
    130: Rule({"SevereAnxiety": "No", "Irritability": "Yes", "Fear": "Yes", "Hypervigilance": "Yes"},
              {"Disorder": "GENERALIZED ANXIETY DISORDER"}),
    140: Rule({"Sadness": "Yes", "ManicEpisodes": "Yes", "Apathy": "Yes", "Hopelessness": "Yes", "Apprehension": "Yes", "LossOfInterest": "Yes"},
              {"Disorder": "BIPOLAR DISORDER"}),
    150: Rule({"Sadness": "Yes", "ManicEpisodes": "Yes", "Apathy": "Yes", "Hopelessness": "Yes", "Apprehension": "Yes", "LossOfInterest": "No"},
              {"Disorder": "BIPOLAR DISORDER"}),
    160: Rule({"Sadness": "Yes", "ManicEpisodes": "Yes", "Apathy": "Yes", "Hopelessness": "Yes", "Apprehension": "No", "LossOfInterest": "Yes"},
              {"Disorder": "BIPOLAR DISORDER"}),
    170: Rule({"Sadness": "Yes", "ManicEpisodes": "Yes", "Apathy": "Yes", "Hopelessness": "No", "Apprehension": "Yes", "LossOfInterest": "Yes"},
              {"Disorder": "BIPOLAR DISORDER"}),
    180: Rule({"Sadness": "Yes", "ManicEpisodes": "Yes", "Apathy": "No", "Hopelessness": "Yes", "Apprehension": "Yes", "LossOfInterest": "Yes"},
              {"Disorder": "BIPOLAR DISORDER"}),
    190: Rule({"Sadness": "Yes", "ManicEpisodes": "No", "Apathy": "Yes", "Hopelessness": "Yes", "Apprehension": "Yes", "LossOfInterest": "Yes"},
              {"Disorder": "BIPOLAR DISORDER"}),
    200: Rule({"Sadness": "No", "ManicEpisodes": "Yes", "Apathy": "Yes", "Hopelessness": "Yes", "Apprehension": "Yes", "LossOfInterest": "Yes"},
              {"Disorder": "BIPOLAR DISORDER"}),
    210: Rule({"SelfHarm": "Yes", "AlteredConscious": "Yes", "SelfDestructiveBehavior": "Yes", "FeelingSelfDetatchment": "Yes"},
              {"Disorder": "DISSOCIATIVE IDENTITY DISORDER"}),
    220: Rule({"SelfHarm": "Yes", "AlteredConscious": "Yes", "SelfDestructiveBehavior": "Yes", "FeelingSelfDetatchment": "No"},
              {"Disorder": "DISSOCIATIVE IDENTITY DISORDER"}),
    230: Rule({"SelfHarm": "Yes", "AlteredConscious": "Yes", "SelfDestructiveBehavior": "No", "FeelingSelfDetatchment": "Yes"},
              {"Disorder": "DISSOCIATIVE IDENTITY DISORDER"}),
    240: Rule({"SelfHarm": "Yes", "AlteredConscious": "No", "SelfDestructiveBehavior": "Yes", "FeelingSelfDetatchment": "Yes"},
              {"Disorder": "DISSOCIATIVE IDENTITY DISORDER"}),
    250: Rule({"SelfHarm": "No", "AlteredConscious": "Yes", "SelfDestructiveBehavior": "Yes", "FeelingSelfDetatchment": "Yes"},
              {"Disorder": "DISSOCIATIVE IDENTITY DISORDER"}),
    260: Rule({"Grandiosity": "Yes", "Euphoria": "Yes", "SuddenEnergy": "Yes"},
              {"Disorder": "SCHIZO-AFFECTIVE DISORDER"}),
    270: Rule({"Grandiosity": "Yes", "Euphoria": "Yes", "SuddenEnergy": "No"},
              {"Disorder": "SCHIZO-AFFECTIVE DISORDER"}),
    280: Rule({"Grandiosity": "Yes", "Euphoria": "No", "SuddenEnergy": "Yes"},
              {"Disorder": "SCHIZO-AFFECTIVE DISORDER"}),
    290: Rule({"Grandiosity": "No", "Euphoria": "Yes", "SuddenEnergy": "Yes"},
              {"Disorder": "SCHIZO-AFFECTIVE DISORDER"}),
    300: Rule({"LossOfInterest": "Yes", "ExcessiveCrying": "Yes", "Irritability": "Yes"},
              {"Disorder": "MAJOR DEPRESSIVE DISORDER"}),
    310: Rule({"LossOfInterest": "Yes", "ExcessiveCrying": "Yes", "Irritability": "No"},
              {"Disorder": "MAJOR DEPRESSIVE DISORDER"}),
    320: Rule({"LossOfInterest": "Yes", "ExcessiveCrying": "No", "Irritability": "Yes"},
              {"Disorder": "MAJOR DEPRESSIVE DISORDER"}),
    330: Rule({"LossOfInterest": "No", "ExcessiveCrying": "Yes", "Irritability": "Yes"},
              {"Disorder": "MAJOR DEPRESSIVE DISORDER"}),
    340: Rule({"RitualisticBehavior": "Yes", "CompulsiveHoarding": "Yes", "PanicAttacks": "Yes"},
              {"Disorder": "OBSSESSIVE COMPULSIVE DISORDER"}),
    350: Rule({"RitualisticBehavior": "Yes", "CompulsiveHoarding": "Yes", "PanicAttacks": "No"},
              {"Disorder": "OBSSESSIVE COMPULSIVE DISORDER"}),
    360: Rule({"RitualisticBehavior": "Yes", "CompulsiveHoarding": "No", "PanicAttacks": "Yes"},
              {"Disorder": "OBSSESSIVE COMPULSIVE DISORDER"}),
    370: Rule({"RitualisticBehavior": "No", "CompulsiveHoarding": "Yes", "PanicAttacks": "Yes"},
              {"Disorder": "OBSSESSIVE COMPULSIVE DISORDER"}),
    380: Rule({"CompulsiveBehavior": "Yes", "InappropriateEmotionalResponse": "Yes", "ElevatedMood": "Yes"},
              {"Disorder": "SCHIZOPHRENIA"}),
    390: Rule({"CompulsiveBehavior": "Yes", "InappropriateEmotionalResponse": "Yes", "ElevatedMood": "No"},
              {"Disorder": "SCHIZOPHRENIA"}),
    400: Rule({"CompulsiveBehavior": "Yes", "InappropriateEmotionalResponse": "No", "ElevatedMood": "Yes"},
              {"Disorder": "SCHIZOPHRENIA"}),
    410: Rule({"CompulsiveBehavior": "No", "InappropriateEmotionalResponse": "Yes", "ElevatedMood": "Yes"},
              {"Disorder": "SCHIZOPHRENIA"}),
    420: Rule({"VisualHallucinations": "Yes", "PersistentRepetitions": "Yes", "ReligiousDelusions": "Yes"},
              {"Disorder": "PSYCHOSIS"}),
    430: Rule({"VisualHallucinations": "Yes", "PersistentRepetitions": "Yes", "ReligiousDelusions": "No"},
              {"Disorder": "PSYCHOSIS"}),
    440: Rule({"VisualHallucinations": "Yes", "PersistentRepetitions": "No", "ReligiousDelusions": "Yes"},
              {"Disorder": "PSYCHOSIS"}),
    450: Rule({"VisualHallucinations": "No", "PersistentRepetitions": "Yes", "ReligiousDelusions": "Yes"},
              {"Disorder": "PSYCHOSIS"}),
    460: Rule({"VisualHallucinations": "No", "PersistentRepetitions": "No", "ReligiousDelusions": "Yes"},
              {"Disorder": "NO DISORDER"}),
    470: Rule({"VisualHallucinations": "No", "PersistentRepetitions": "Yes", "ReligiousDelusions": "No"},
              {"Disorder": "NO DISORDER"}),
    480: Rule({"VisualHallucinations": "Yes", "PersistentRepetitions": "No", "ReligiousDelusions": "No"},
              {"Disorder": "NO DISORDER"}),
    490: Rule({"VisualHallucinations": "No", "PersistentRepetitions": "No", "ReligiousDelusions": "No"},
              {"Disorder": "NO DISORDER"})
}

# Define the conclusion list
conclusion_variables = [
    "Disorder"
]
# Add more conclusion variables as needed


# Define functions to add facts and apply rules, and search for clause variables
def add_fact(key, value):
    facts[key] = value


def validate_Ri(rule_num):
    rule = rules[rule_num]
    for condition in rule.conditions.keys():  # Check if all conditions are met in the facts
        if rule.conditions[condition].lower() != facts[condition].lower():
            return False
    for item in list(rule.actions.keys()):
        add_fact(item, rule.actions[item])
    print(f"Rule applied: {rule_num}")
    for condition in rule.conditions.keys():
        print(f"{condition} => {rule.conditions[condition]}")
    return True


def rule_to_clause(rule_number):
    # Implenent the formula
    # If the rule numbers are
    # sequenced like 1,2,3,4,5, ......), formula is:
    # CLAUSE NUMBER (Ci) = 10* (RULE NUMBER (Ri) - 1) + 1
    # If the rule numbers are sequenced like 10,20,30,40,50, ......), formula is:
    # CLAUSE NUMBER = 10* (RULE NUMBER / 10 - 1) + 1
    if rule_number < 10:
        clause_number = 10 * (rule_number - 1)
    else:
        clause_number = 10 * (rule_number // 10 - 1)
    print(f"Rule #{rule_number} correspondes to Clasue #{clause_number}")
    # Call update_VL with the calculated clause number
    update_VL(clause_number)


def search_con(variable):
    rule_numbers = []
    for i in range(0, 48):
        rule_number = (i + 1) * 10
        rule_numbers.append(rule_number)
    return rule_numbers


def update_VL(Ci):
    if Ci is not None and Ci >= 0:
        for i in range(Ci, Ci + 9):  # Assuming ten slots per rule in the variable list
            if i < len(clause_variables):
                if clause_variables[i] != "":
                    var = clause_variables[i]
                    if facts[var] == None and var in variable_list:
                        value = input(variable_list[var])
                        add_fact(var, value)
                    if facts[var] == None and var in conclusion_variables:
                        process_variable(var)


def process_variable(variable):
    while True:
        # Call search_con(variable) to find the matching variable in the conclusion list and its corresponding rule number (Ri)
        rule_numbers = search_con(variable)

        if not rule_numbers:
            print(f"Variable '{variable}' not found in any clause.")
        else:
            for ri in rule_numbers:
                print(f"Variable '{variable}' found in rule {ri}")
                # Call rule_to_clause(Ri) to convert the rule number (Ri) to a clause number (Ci)
                rule_to_clause(ri)
                if validate_Ri(ri):
                    if facts.get(variable) is not None:
                        # Goal is already known
                        return facts[variable]


def backward_chaining(goal_variable):
    # Processing
    # Read the value of the given variable and call process variable
    conclusion = process_variable(goal_variable)

    # After the backward chaining process is complete
    return conclusion


# backward_chaining("Disorder")
